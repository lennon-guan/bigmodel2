package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/fs"
	"io/ioutil"
	"strings"
	"text/template"
)

const (
	IMPORT_BEGIN = "// BEGIN_IMPORT, DO NOT MODIFY OR DELETE THIS LINE\n"
	IMPORT_END   = "// END_IMPORT, DO NOT MODIFY OR DELETE THIS LINE\n"
)

func getImports(outfile string) (string, error) {
	orig, err := ioutil.ReadFile(outfile)
	if err != nil {
		return "", err
	}
	code := string(orig)
	begin := strings.Index(code, IMPORT_BEGIN)
	if begin == -1 {
		return "", nil
	}
	begin += len(IMPORT_BEGIN)
	end := strings.Index(code[begin:], IMPORT_END)
	if end == -1 {
		return "", nil
	}
	end += begin
	return code[begin:end], nil
}

type renderInfo struct {
	ModelInfo
	Imports     string
	ImportBegin string
	ImportEnd   string
}

func renderModelImpl(model *ModelInfo, useGeneric bool, outfile string, outMode fs.FileMode) error {
	var out bytes.Buffer
	var tpl string
	if useGeneric {
		tpl = modelGenericFileTpl
	} else {
		tpl = modelFileTpl
	}
	imports, err := getImports(outfile)
	fmt.Println(outfile, imports, err)
	if err != nil {
		return err
	}
	if imports == "" {
		imports = "import (\n\"sync\"\n)\n"
	}
	info := renderInfo{
		ModelInfo:   *model,
		Imports:     imports,
		ImportBegin: IMPORT_BEGIN,
		ImportEnd:   IMPORT_END,
	}
	if err := template.Must(template.New("model").Funcs(getFuncs(model)).Parse(tpl)).Execute(&out, info); err != nil {
		return err
	}
	formatted, err := format.Source(out.Bytes())
	if err != nil {
		return err
	}
	return ioutil.WriteFile(outfile, formatted, outMode)
}

func getFuncs(model *ModelInfo) template.FuncMap {
	return template.FuncMap{
		"capitalize": func(s string) string {
			if len(s) == 0 {
				return s
			}
			return strings.ToUpper(s[0:1]) + s[1:]
		},
		"getType": func(sourceName string) (string, error) {
			if n, ok := model.SourceTypes[sourceName]; ok {
				return n, nil
			} else {
				return "", fmt.Errorf("未知数据源名: %s", sourceName)
			}
		},
	}
}

var modelFileTpl = `// Generated by big model
package {{.Package}}

{{.ImportBegin}}{{.Imports}}
{{.ImportEnd}}
type (
	{{.Name}}Ex interface {
		{{.Name}}
		{{- range .Properties }}
		// {{.Name}}
		Get{{.Name}}() ({{.Return}}, error)
		Default{{.Name}}(defaultValue {{.Return}}) {{.Return}}
		{{- end }}
	}
	_{{.Name}}InnerImpl struct {
		env interface{}
	{{- range .Sources}}
		// {{.}}
		{{.}}__data {{getType .}}
		{{.}}__once sync.Once
		{{.}}__err error
	{{- end }}
	}
	_{{.Name}}Impl struct { _{{.Name}}InnerImpl }
)

func New{{.Name}}(env interface{}) {{.Name}}Ex {
	return &_{{.Name}}Impl{
		_{{.Name}}InnerImpl{env: env},
	}
}

{{ range .Properties }}
/******************************
 * Property {{.Name}}
 ******************************/

func (m *_{{$.Name}}InnerImpl) {{.Name}}() {{.Return}} {
	if d, e := m.onceGet{{capitalize .Source}}(); e != nil {
		panic(e)
	} else {
		return d.{{.GetValue}}
	}
}

func (m *_{{$.Name}}InnerImpl) Get{{.Name}}() (ret {{.Return}}, err error) {
	if d, e := m.onceGet{{capitalize .Source}}(); e != nil {
		err = e
	} else {
		ret = d.{{.GetValue}}
	}
	return
}

func (m *_{{$.Name}}InnerImpl) Default{{.Name}}(defaultValue {{.Return}}) {{.Return}} {
	if d, e := m.onceGet{{capitalize .Source}}(); e != nil {
		return defaultValue
	} else {
		return d.{{.GetValue}}
	}
}
{{ end }}

{{ range .Sources }}
func (m *_{{$.Name}}InnerImpl) onceGet{{capitalize .}}() ({{getType .}}, error) {
	m.{{.}}__once.Do(func() {
		m.{{.}}__data, m.{{.}}__err = m.get{{capitalize .}}(m.env)
	})
	return m.{{.}}__data, m.{{.}}__err
}
{{ end }}

//请另起文件自行实现以下方法：
{{ range .Sources }}
// func (m *_{{$.Name}}InnerImpl) get{{capitalize .}}(env interface{}) ({{getType .}}, error)
{{- end }}

`

var modelGenericFileTpl = `// Generated by big model
package {{.Package}}

import (
	"sync"
)

type (
	source[T any] struct {
		data T
		once sync.Once
		err  error
	}
	{{.Name}}Ex interface {
		{{.Name}}
		{{- range .Properties }}
		// {{.Name}}
		Get{{.Name}}() ({{.Return}}, error)
		Default{{.Name}}(defaultValue {{.Return}}) {{.Return}}
		{{- end }}
	}
	_{{.Name}}InnerImpl struct {
		env interface{}
	{{- range .Sources}}
		{{.}} source[{{getType .}}]
	{{- end }}
	}
	_{{.Name}}Impl struct { _{{.Name}}InnerImpl }
)

func New{{.Name}}(env interface{}) {{.Name}}Ex {
	return &_{{.Name}}Impl{
		_{{.Name}}InnerImpl{env: env},
	}
}

{{ range .Properties }}
/******************************
 * Property {{.Name}}
 ******************************/

func (m *_{{$.Name}}InnerImpl) {{.Name}}() {{.Return}} {
	if d, e := m.onceGet{{capitalize .Source}}(); e != nil {
		panic(e)
	} else {
		return d.{{.GetValue}}
	}
}

func (m *_{{$.Name}}InnerImpl) Get{{.Name}}() (ret {{.Return}}, err error) {
	if d, e := m.onceGet{{capitalize .Source}}(); e != nil {
		err = e
	} else {
		ret = d.{{.GetValue}}
	}
	return
}

func (m *_{{$.Name}}InnerImpl) Default{{.Name}}(defaultValue {{.Return}}) {{.Return}} {
	if d, e := m.onceGet{{capitalize .Source}}(); e != nil {
		return defaultValue
	} else {
		return d.{{.GetValue}}
	}
}
{{ end }}

{{ range .Sources }}
func (m *_{{$.Name}}InnerImpl) onceGet{{capitalize .}}() ({{getType .}}, error) {
	m.{{.}}.once.Do(func() {
		m.{{.}}.datadata, m.{{.}}__err = m.get{{capitalize .}}(m.env)
	})
	return m.{{.}}__data, m.{{.}}__err
}
{{ end }}

//请另起文件自行实现以下方法：
{{ range .Sources }}
// func (m *_{{$.Name}}InnerImpl) get{{capitalize .}}(env interface{}) ({{getType .}}, error)
{{- end }}

`
